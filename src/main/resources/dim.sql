-- DIM 层
    -- dimension
        -- DIM 层的核心意图是构建统一、标准、易用的维度表，为上层数仓模型和 BI 分析提供一致的数据视角和上下文描述
        -- 维度表保存的是分析数据的角度表
            -- 年龄
            -- 性别
            -- 品类
            -- 品牌
        -- 行为分析的数据统计
        -- 状态的数据分析
-- 作用
# 1. 提供分析视角
# 如时间、用户、商品、地区等，用于对事实进行多维分析（OLAP 分析）。
# 2. 标准化维度信息
# 对原始系统中的维度数据进行清洗、统一、标准化。例如：将性别字段统一为“男/女”，而不是“1/0”或“male/female”。
# 3. 支持缓慢变化维度（SCD）处理
# 处理如用户地址、品牌名称等随时间变化的信息，支持历史追踪（Type 1 / Type 2）。
# 4. 与 DWD/DWS 表关联使用
# DIM 表通常与 DWD（明细层）、DWS（汇总层）的事实表进行 Join，用于丰富分析维度。

# 三、典型 DIM 表示例
# 表名
# 描述
# dim_user_info
# 用户维度表，包含用户ID、昵称、性别、年龄、注册时间等
# dim_sku_info
# 商品SKU维度表，包含SKU ID、SPU ID、价格、品牌、分类等
# dim_base_province
# 地区维度表，包含省份ID、省份名称、区域、GDP等
# dim_base_region
# 区域维度表，用于划分销售区域、地理区域等
# dim_date
# 时间维度表，用于日期维度分析，包含年、季度、月、周、节假日等


#   四、DIM 层与其他层的关系
# 层级
# 作用
# 与 DIM 的关系
# ODS
# 原始数据接入层
# DIM 数据可能来源于 ODS 层的维度数据（如 MySQL 表）
# DWD
# 明细数据层
# DIM 表常与 DWD 层的事实表进行 Join，用于提供分析维度
# DWS
# 汇总数据层
# DIM 表可与 DWS 聚合表结合使用，生成多维聚合报表
# ADS
# 应用数据层
# 最终 BI 报表或接口查询时，依赖 DIM 表提供标签和维度信息

# 五、DIM 层设计要点
# 设计原则
# 说明
# 使用 星型模型 或 雪花模型
# 星型模型更常见，以事实表为中心，多个维度表直接连接
# 维度表尽量 冗余字段
# 减少多层 Join，提升查询性能
# 支持 缓慢变化维度处理
# 如 Type 2 变化跟踪（添加版本字段或 start/end 时间）
# 主键使用 代理键（Surrogate Key）
# 避免使用源系统的自然键，保证主键唯一性和稳定性
# 字段命名清晰，有注释
# 方便上层应用理解每个维度字段的含义

# 存储方式 :列存储 OCR + 快速解压缩 snappy
# 数据来源 : ODS 层



# 命名规范 dim_<业务域>_<表名>_<更新频率或类型>
    # 所属业务模块，如用户、商品、地区等 user, sku, base, date
    # 具体维度名称，描述该表的主题 user_info, sku_info, province, region
    # 如全量、增量、缓慢变化维度类型等 _full, _inc, _scd2

# DIM 层的维度表主要以“全量表”为主（如区域、时间、性别等），
# 对于需要记录历史变化的维度（如用户信息、商品SKU）则使用“缓慢变化维度（SCD Type 2 / 拉链表）”
# ，其余快速变化字段建议通过事实表记录或忽略历史。
    # 特殊情况用拉链表，大部份用全量表
        #拉链表是数据仓库中用于处理 缓慢变化维度（Slowly Changing Dimension, SCD） 的一种技术手段，主要用于记录维度数据的历史变更情况。
        # 核心思想：当某个维度属性发生变化时，不是直接覆盖原有记录，而是新增一条记录，并通过“生效时间”和“失效时间”来标识该记录的有效时间段。
        # 优点：可以记录维度属性可以完整保留维度信息的历史变化轨迹，便于做历史数据分析。
        # 缺点：需要额外的存储空间和计算资源，并且需要处理大量数据进行维护。
        # 适用场景：用户地址、姓名、职位等信息会随着时间改变；用户等级、VIP状态变化；
        # 关键字段：id, start_time, end_time, is_current



CREATE DATABASE IF NOT EXISTS dim;